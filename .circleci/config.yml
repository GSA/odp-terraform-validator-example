version: 2.1

# First we will define the jobs that are used in the workflows.
# 
# Workflows can be found at the bottom of this file.  They specify
# what order the jobs run in and what depends on what.

commands:
  init-gcp:
    description: "Create the service account json file for authentication, and any other GCP functions for project setup."
    steps:
      - run:
          name: Create access key file for service account 
          command: |
            . ${BASH_ENV}
            echo $(env | grep -E "^GCLOUD_SERVICE_KEY_${CIRCLE_BRANCH}=" | sed "s/^GCLOUD_SERVICE_KEY_${CIRCLE_BRANCH}=//") > ${HOME}/gcloud-service-key.json

  install-gcp-sdk:
    description: "Install the Google Cloud SDK if it is required.  None google/cloud-sdk images will most likely require this."
    parameters:
      sdk_version:
        type: string
        default: "258"    
    steps:
      - run:
          name: Setup Google Cloud SDK
          command: |   
            echo "Installing Google Cloud SDK..."        
            if hash gcloud 2>/dev/null
            then
              echo "Google Cloud already installed..."
            else
              export GCLOUD_SDK_VERSION=<< parameters.sdk_version >>
              curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCLOUD_SDK_VERSION.0.0-linux-x86_64.tar.gz -o ./gcloud-sdk.tar.gz
              tar xzf gcloud-sdk.tar.gz -C ~
              rm gcloud-sdk.tar.gz
              export PATH=~/google-cloud-sdk/bin:$PATH
              echo 'export PATH=~/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
              source $BASH_ENV              
            fi       
  run-terraform-validator:
    description: "Install the Google Cloud SDK if it is required.  None google/cloud-sdk images will most likely require this."
    parameters:
      release:
        type: string
        default: "2019-10-8"    
    steps:
      - run:
          name: Install Terraform Validator
          command: |   
            . ${BASH_ENV}
            export POLICY_PATH=${HOME}/odp-policy-library
            #Download the specified release of teraform-validator
            gsutil cp gs://gsa-odp-terraform-validator/releases/<< parameters.release >>/terraform-validator ${HOME}/terraform-validator
            chmod 750 ${HOME}/terraform-validator
            #Clone the policy library
            cd ${HOME}
            git clone https://github.com/GSA/odp-policy-library.git
            cd ${HOME}/project/${CIRCLE_BRANCH}
            # Generate a Terraform plan and convert to JSON format.
            terraform init -backend-config="bucket=${STATE_BUCKET}" -backend-config="prefix=${STATE_PREFIX}"
            terraform plan --out=terraform.tfplan
            terraform show -json ./terraform.tfplan > ./terraform.tfplan.json
            #Validate your Terraform plan
            ${HOME}/terraform-validator validate --project=${GOOGLE_PROJECT_ID} --policy-path=${POLICY_PATH} ./terraform.tfplan.json
                    
  prepare-terraform-bucket:
    description: "Create the service account json file for authentication,and set the project id from CircleCI variables."
    steps:
      - run:
          name: Create terraform bucket
          command: |
            . ${BASH_ENV}
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID   
            gsutil mb gs://${STATE_BUCKET} || true     

  setup-environment-vars:
    description: "Setup environment variables."
    steps:
      - run:
          name: Export required environment variables.
          command: |
            export GOOGLE_PROJECT_ID=$(env | awk -F= "/^GOOGLE_PROJECT_ID_${CIRCLE_BRANCH}=/ {print \$2}")
            cat \<<EOF >> $BASH_ENV
            #GCP Specific vars
            export GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
            #Terraform backend variables
            export STATE_BUCKET=tf-${GOOGLE_PROJECT_ID}-${CIRCLE_PROJECT_REPONAME}
            export STATE_PREFIX=terraform/state/odp-tf-validator-example-${CIRCLE_BRANCH}
            #Terraform backend variables
            export TF_VAR_project_id=${GOOGLE_PROJECT_ID}
            export TF_VAR_environment=${CIRCLE_BRANCH}
            export TF_VAR_cloudsql_db_name="${CLOUDSQL_DB}"
            export TF_VAR_cloudsql_username="${CLOUDSQL_USERNAME}"
            export TF_VAR_cloudsql_password="${CLOUDSQL_PASSWORD}"
            #Terraform Validator variables 
            export export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            EOF

  run-terraform:
    description: "Run Terraform commands."
    parameters:
      command:
        type: string
        default: "validate"
    steps:
      - run:
          name: Run Terraform commands.
          command: |
            . ${BASH_ENV}
            cd ${CIRCLE_BRANCH}
            terraform init -backend-config="bucket=${STATE_BUCKET}" -backend-config="prefix=${STATE_PREFIX}"
            terraform << parameters.command >>          
jobs: 

  setup:
    docker:
      - image: google/cloud-sdk
    steps:
      - setup-environment-vars
      - init-gcp      
      - prepare-terraform-bucket

  terraform:
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout
      - run:
          name: Install curl for curling purposes
          command: | 
            apk add --update curl python
      - install-gcp-sdk:
        sdk_version: "258"
      - setup-environment-vars
      - init-gcp    
      - run-terraform-validator   
      - run-terraform:
        command: validate
      - run-terraform:
        command: plan -input=false 
      - run-terraform:
        command: apply -input=false         

 

#These are the workflows that define what CircleCI actually does.
workflows:
  version: 2.1
  terraform_example:
    jobs:
      - setup
      - terraform:
          requires:
            - setup          
