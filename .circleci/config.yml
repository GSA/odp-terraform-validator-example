version: 2.1

# First we will define the jobs that are used in the workflows.
# 
# Workflows can be found at the bottom of this file.  They specify
# what order the jobs run in and what depends on what.

commands:
  set-gcp-init-vars:
    description: "Create the service account json file for authentication,and set the project id from CircleCI variables."
    steps:
      - run:
          name: set up job variables and key
          command: |
            echo $(env | grep -E "^GCLOUD_SERVICE_KEY_${CIRCLE_BRANCH}=" | sed "s/^GCLOUD_SERVICE_KEY_${CIRCLE_BRANCH}=//") > ${HOME}/gcloud-service-key.json
            export GOOGLE_PROJECT_ID=$(env | awk -F= "/^GOOGLE_PROJECT_ID_${CIRCLE_BRANCH}=/ {print \$2}")
            echo "export GOOGLE_PROJECT_ID='$GOOGLE_PROJECT_ID'" >> $BASH_ENV
  prepare-terraform-bucket:
    description: "Create the service account json file for authentication,and set the project id from CircleCI variables."
    steps:
      - run:
          name: set up job variables and key
          command: |
            #Using '.' vs '-' as it increases character count in name.  You can have up to 222 characters when separating up to 63 characters by a '.'.
            echo "export STATE_BUCKET=tf.state.${GOOGLE_PROJECT_ID}.${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV 
            echo "export STATE_PREFIX=terraform/state/odp-tf-validator-example-${CIRCLE_BRANCH}" >> $BASH_ENV
            #Setup the bucket for the Terraform state
            . "${BASH_ENV}"
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID   
            gsutil mb gs://${STATE_BUCKET} || true            
  setup-environment-vars:
    description: "Setup environment variables."
    steps:
      - run:
          name: Run Terraform commands.
          command: |
            #Load CIRCLE  environment variables as bash environment variables
            . "${BASH_ENV}"
            export TF_VAR_project_id=${GOOGLE_PROJECT_ID}
            export TF_VAR_environment=${CIRCLE_BRANCH}
            export TF_VAR_cloudsql_db_name="${CLOUDSQL_DB}"
            export TF_VAR_cloudsql_username="${CLOUDSQL_USERNAME}"
            export TF_VAR_cloudsql_password="${CLOUDSQL_PASSWORD}"

  run-terraform:
    description: "Run Terraform commands."
    parameters:
      command:
        type: string
        default: "validate"
    steps:
      - run:
          name: Run Terraform commands.
          command: |
            cd ${CIRCLE_BRANCH} && terraform init -backend-config="bucket=${STATE_BUCKET} prefix=${STATE_PREFIX}" && terraform << parameters.command >> -input=false          
jobs: 

  gcp_setup:
    docker:
      - image: google/cloud-sdk
    steps:
      - set-gcp-init-vars
      - prepare-terraform-bucket

  terraform:
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout    
      - set-gcp-init-vars
      - setup-environment-vars
      - run-terraform:
        command: validate
      - run-terraform:
        command: plan
      - run-terraform:
        command: apply        

 

#These are the workflows that define what CircleCI actually does.
workflows:
  version: 2.1
  terraform_example:
    jobs:
      - gcp_setup
      - terraform:
          requires:
            - gcp_setup          
